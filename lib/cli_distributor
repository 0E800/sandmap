#!/usr/bin/env bash

# shellcheck shell=bash

# ``````````````````````````````````````````````````````````````````````````````
# Function name: cli_distributor()
#
# Description:
#   Modules distributor.
#
# Usage:
#   cli_distributor
#
# Examples:
#   cli_distributor
#

function cli_distributor() {

  # shellcheck disable=SC2034
  local _FUNCTION_ID="cli_distributor"
  local _STATE=0

  local _argv=("$@")

  # shellcheck disable=SC2154
  if [[ "${_argv[0]}" == "help" ]] ; then

    if [[ "$_in_module" -eq 0 ]] ; then

      if [[ "${#_argv[1]}" -eq 0 ]] ; then

        cli_help

      else

        init_module "${_argv[@]}"
        init_help

      fi

    else

      init_module "${_argv[@]}"
      init_help

    fi

  elif [[ "${_argv[0]}" == "show" ]] ; then

    if [[ "$_in_module" -eq 0 ]] ; then

      if [[ "${#_argv[1]}" -eq 0 ]] ; then

        cli_show

      else

        init_module "${_argv[@]}"
        init_show

      fi

    else

      init_module "${_argv[@]}"
      init_show

    fi

  elif [[ "${_argv[0]}" == "set" ]] ; then

    if [[ "${#_argv[1]}" -eq 0 ]] ; then

      printf "stdout: %s\n" "unknown key"

    else

      if [[ "$_in_module" -eq 0 ]] ; then

        # shellcheck disable=SC2034
        _variables_stack=("${_session_variables[@]}")

        set_config "${_argv[@]}"

        _session_variables=("${_variables_stack[@]}")

      else

        # shellcheck disable=SC1090
        source "$_module_cfg"

        # shellcheck disable=SC2034
        _variables_stack=("${_module_variables[@]}")

        set_config "${_argv[@]}"

        _module_variables=("${_variables_stack[@]}")

        printf "_module_variables=(\"%s\")\n" "${_module_variables[@]}" > "$_module_cfg"

      fi

    fi

  elif [[ "${_argv[0]}" == "config" ]] ; then

    if [[ "$_in_module" -eq 0 ]] ; then

      if [[ "${#_argv[1]}" -eq 0 ]] ; then

        # shellcheck disable=SC2034
        session_type="main"

        # shellcheck disable=SC2034
        _variables_stack=("${_session_variables[@]}")

        show_config "${_argv[@]}"

      else

        if (( $(echo "${_argv[@]}" | grep -o "$_fname" | wc -w) == 1 )) ; then

          # shellcheck disable=SC2034
          session_type="module"

          init_module "${_argv[@]}"

          # shellcheck disable=SC2034
          _variables_stack=("${_module_variables[@]}")

          show_config "${_argv[@]}"

        else

          # shellcheck disable=SC2034
          session_type="main"

          # shellcheck disable=SC2034
          _variables_stack=("${_session_variables[@]}")

          show_config "${_argv[@]}"

        fi

      fi

    else

      # shellcheck disable=SC1090
      source "$_module_cfg"

      # shellcheck disable=SC2034
      session_type="module"

      # shellcheck disable=SC2034
      _variables_stack=("${_module_variables[@]}")

      show_config "${_argv[@]}"

    fi

  elif [[ "${_argv[0]}" == "reload" ]] ; then

    if [[ "$_in_module" -eq 0 ]] ; then

      if [[ "${#_argv[1]}" -eq 0 ]] ; then

        printf "stdout: %s\n" "unknown param"

      else

        if [[ "${_argv[1]}" == "config" ]] ; then

          cli_config
          init_config

          printf "stdout: %s\n" "config reloaded"

        elif [[ "${_argv[1]}" == "modules" ]] ; then

          # shellcheck disable=SC2034
          modules_list=()
          # shellcheck disable=SC2034
          modules_full_list=()
          # ReInitialize modules.
          load_modules

          # shellcheck disable=SC2034
          for i in $(find "${_modules}" -name '*.cfg' -exec ls {} + | sort -k 10) ; do

            : >"$i"

          done

          printf "stdout: %s\n" "modules reloaded"

        fi

      fi

    else

      if [[ "${#_argv[1]}" -eq 0 ]] ; then

        printf "stdout: %s\n" "unknown param"

      else

        if [[ "${_argv[1]}" == "config" ]] ; then

          cli_config
          init_config

          printf "stdout: %s\n" "config reloaded"

        fi

      fi

    fi

  elif [[ "${_argv[0]}" == "use" ]] ; then

    # shellcheck disable=SC2034
    if (( $(echo "${_argv[@]}" | grep -o "$_fname" | wc -w) == 1 )) ; then

      _in_module=1

      # shellcheck disable=SC2034
      _ld_module="$_fname"

      init_module "$_ld_module"

      "$_ld_module"

      # shellcheck disable=SC2034
      __cli_banner="$_fname"

      # shellcheck disable=SC1090
      source "$_module_cfg"

    else

      printf "stdout: %s\n" "unknown command"

    fi

  elif [[ "${_argv[0]}" == "scans" ]] ; then

    if [[ "$_in_module" -eq 1 ]] ; then

      printf "\n  %-20.20s  %-4.4s %-20.20s  %-20.20s\n  %-20.20s  %-4.4s %-20.20s  %-20.20s\n\n" \
             "Description" \
             "ID" \
             "Alias" \
             "Nmap Parameters" \
             "-----------" \
             "--" \
             "-----" \
             "---------------"

      _count=0

      # shellcheck disable=SC2034
      for _svar in "${_module_commands[@]}" ; do

        # shellcheck disable=SC2034
        _key_description=$(echo "$_svar" | awk -v FS="(:|:)" '{print $1}')
        # shellcheck disable=SC2034
        _key_id=$(echo "$_svar" | awk -v FS="(:|:)" '{print $2}')
        # shellcheck disable=SC2034
        _key_var=$(echo "$_svar" | awk -v FS="(:|:)" '{print $3}')

        printf "  %-20.20s  %-4.4s %-20.20s  %-20s\n" "$_key_description" "$_count" "$_key_id" "$_key_var"

        _count=$((_count + 1))

      done

      echo

    else

      printf "stdout: %s\n" "unknown command"

    fi

  elif [[ "${_argv[0]}" == "init" ]] ; then

    if [[ "$_in_module" -eq 1 ]] ; then

      _count=0

      for _scan in "${_module_commands[@]}" ; do

        # shellcheck disable=SC2034
        _key_id=$(echo "$_scan" | awk -v FS="(:|:)" '{print $2}')
        # shellcheck disable=SC2034
        _key_var=$(echo "$_scan" | awk -v FS="(:|:)" '{print $3}')

        if [[ "${_argv[1]}" == "$_key_id" ]] ; then

          _init_cmd "$_key_var"

        elif [[ "${_argv[1]}" == "$_count" ]] ; then

          _init_cmd "$_key_var"

        fi

        _count=$((_count + 1))

      done

    else

      printf "stdout: %s\n" "unknown command"

    fi

  else

    printf "stdout: %s\n" "unknown command"

  fi

  return $_STATE

}
